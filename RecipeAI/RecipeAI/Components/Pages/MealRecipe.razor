@page "/mealRecipe/{Index:int}"
@using RecipeAI
@inject NavigationManager Navigation
@inject RecipeState recipeState
@using RecipeAI.Services
@inject IOpenAIAPI openAIService
@rendermode InteractiveServer

<div class="container mt-5 h-100">
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="d-flex flex-column flex-lg-row justify-content-start">
            <div class="text-center text-lg-start">
                @if (recipeImage?.Data != null && recipeImage.Data.Length > 0)
                {
                    <img class="rounded-3" src="@recipeImage.Data[0].Url" alt="Recipe Image" />
                }
                else
                {
                    <p>No image available</p>
                }
            </div>
            <div class="flex-grow-1 px-3">
                <h1 class="fw-bold">@Title</h1>
                <p>@Description</p>
            </div>
        </div>
        <div class="row row-cols-1 row-cols-md-2 mt-3">
            <div class="col">
                <h2>Ingredients</h2>
                <ul>
                    @foreach (var ingredient in Ingredients)
                    {
                        <li>@ingredient</li>
                    }
                </ul>
            </div>
            <div class="col">
                <h2>Instructions</h2>                
                <p>@Instructions</p>              
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int Index { get; set; }

    private bool isLoading = true;
    private string? Title;
    private string? Description;
    private List<string> Ingredients = new List<string>();
    private string? Instructions;
    private RecipeImage? recipeImage;

    protected override async Task OnInitializedAsync()
    {
        if (recipeState?.Ideas != null && Index >= 0 && Index < recipeState.Ideas.Count)
        {
            var recipeIdea = recipeState.Ideas[Index];
            Title = recipeIdea.Title;
            Description = recipeIdea.Description;

            // Check if the recipe is already cached
            if (!recipeState.CachedRecipes.ContainsKey(Index) || !recipeState.CachedRecipeImages.ContainsKey(Index))
            {
                // Fetch recipe details and image if not cached
                var recipeTask = openAIService.CreateRecipe(recipeIdea.Title, recipeState.IngredientList);
                var imageTask = openAIService.CreateRecipeImage(recipeIdea.Title);

                // Wait for both tasks to complete
                var recipe = await recipeTask;
                recipeImage = await imageTask;

                if (recipe != null)
                {
                    // Cache the fetched recipe and image
                    recipeState.CachedRecipes[Index] = recipe;
                    recipeState.CachedRecipeImages[Index] = recipeImage;

                    Ingredients = recipe.Ingredients?.ToList() ?? new List<string>();
                    Instructions = recipe.Instructions != null
                        ? string.Join(" ", recipe.Instructions)
                        : "No instructions available.";
                }
            }
            else
            {
                // Use the cached data
                var cachedRecipe = recipeState.CachedRecipes[Index];
                var cachedImage = recipeState.CachedRecipeImages[Index];

                Ingredients = cachedRecipe.Ingredients?.ToList() ?? new List<string>();
                Instructions = cachedRecipe.Instructions != null
                    ? string.Join(" ", cachedRecipe.Instructions)
                    : "No instructions available.";
                recipeImage = cachedImage;
            }
        }
        else
        {
            Title = "Recipe not found";
        }

        isLoading = false; // Set loading to false after everything is loaded
    }
}