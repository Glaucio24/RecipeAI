@page "/mealIdeas"
@inject IHttpClientFactory ClientFactory
@inject RecipeState recipeState
@using System.Text.Json
@using RecipeAI.Services
@inject IOpenAIAPI openAIService
@rendermode InteractiveServer



<div class="container mt-5">
    <h3 class="mb-3">Recipe Ideas for @recipeState.MealTime</h3>
</div>

@if (loading)
{
    <div class="container mt-3">
        <h3>Loading...</h3>
    </div>
}
else if (ideas != null && ideas.Count > 1)
{
    <div class="container">
        <h3>Pick a Choice from Generated Meals</h3>
        <div class="list-group mt-5 mb-5">
            @foreach (var idea in ideas)
            {
                <button class="list-group-item list-group-item-action list-group-item-danger p-2">
                    <div class="d-flex w-100 justify-content-sm-between">
                        <h2 class="mb-1 fw-bold">@idea.Title</h2>
                    </div>
                    <p class="mb-1">@idea.Description</p>
                </button>
            }
        </div>
    </div>
}
else
{
    <div class="container mt-3">
        <h4>No recipe ideas found. Please check the ingredients or try again later.</h4>
    </div>
}

@code {
    private List<Idea> ideas = new List<Idea>();
    private bool loading;
    private readonly IOpenAIAPI _openAIservice;// The Open AI interface looks good now you just need to make sure the api model work for fucntion and render open ai corerectly on this page right here.

    protected override async Task OnInitializedAsync()
    {
            // figure out what goes in here i have a good feeling it will work perfectly 
    }

   


}

