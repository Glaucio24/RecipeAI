@page "/mealIdeas"
@inject IHttpClientFactory ClientFactory
@inject RecipeState recipeState
@using System.Text.Json
@using RecipeAI.Services
@inject IOpenAIAPI openAIService
@rendermode InteractiveServer

<div class="container mt-5">
    <h3 class="mb-3">Recipe Ideas for @recipeState.MealTime</h3>
</div>

@if (loading)
{
    <div class="container mt-3">
        <h3>Loading...</h3>
    </div>
}
else if (ideas != null && ideas.Count > 0)
{
    <div class="container">
        <h3>Pick a Choice from Generated Meals</h3>
        <div class="list-group mt-5 mb-5">
            @foreach (var idea in ideas)
            {
                <button class="list-group-item list-group-item-action list-group-item-danger p-2">
                    <div class="d-flex w-100 justify-content-sm-between">
                        <h2 class="mb-1 fw-bold">@idea.Title</h2>
                    </div>
                    <p class="mb-1">@idea.Description</p>
                </button>
            }
        </div>
    </div>
}
else
{
    <div class="container mt-3">
        <h4>No recipe ideas found. Please check the ingredients or try again later.</h4>
    </div>
}

@code {
    private List<Idea> ideas = new List<Idea>();
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        loading = true;  // Show loading indicator
        try
        {
            // Use MealTime and Ingredients from RecipeState
            string mealtime = recipeState.MealTime ?? "Breakfast";
            List<string> ingredientList = recipeState.Ingredients.Select(i => i.Description).ToList();

            // Call OpenAIService to generate recipe ideas
            ideas = await openAIService.CreateRecipeIdeas(mealtime, ingredientList);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching recipe ideas: {ex.Message}");
        }
        finally
        {
            loading = false; // Hide loading indicator
        }
    }
}
